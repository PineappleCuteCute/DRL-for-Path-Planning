# -*- coding: utf-8 -*-
"""
M√¥i tr∆∞·ªùng h·ªçc tƒÉng c∆∞·ªùng cho b√†i to√°n l·∫≠p k·∫ø ho·∫°ch ƒë∆∞·ªùng ƒëi.

T·∫°o: Ng√†y 12 th√°ng 12 nƒÉm 2024, 17:54:17
C·∫≠p nh·∫≠t: Ng√†y 12 th√°ng 12 nƒÉm 2024

T√°c gi·∫£: ƒê√†o Th√†nh M·∫°nh
GitHub: https://github.com/PineappleCuteCute
"""
#

# 1. Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng
from path_plan_env import StaticPathPlanning, NormalizedActionsWrapper
env = NormalizedActionsWrapper(StaticPathPlanning())


# 2. T·∫£i chi·∫øn l∆∞·ª£c
import onnxruntime as ort
policy = ort.InferenceSession("./path_plan_env/policy_static.onnx")


# 3. V√≤ng l·∫∑p m√¥ ph·ªèng
from copy import deepcopy

MAX_EPISODE = 20
for episode in range(MAX_EPISODE):
    ## L·∫•y quan s√°t ban ƒë·∫ßu
    obs = env.reset()
    ## Th·ª±c hi·ªán m·ªôt v√≤ng m√¥ ph·ªèng
    for steps in range(env.max_episode_steps):
        # Hi·ªÉn th·ªã tr·ª±c quan
        env.render()
        # Quy·∫øt ƒë·ªãnh
        obs = obs.reshape(1, *obs.shape)                      # (*shape, ) -> (1, *shape, )
        act = policy.run(['action'], {'observation': obs})[0] # Tr·∫£ v·ªÅ [action, ...]
        act = act.flatten()                                   # (1, dim, ) -> (dim, )
        # M√¥ ph·ªèng
        next_obs, _, _, info = env.step(act)
        # V√≤ng k·∫øt th√∫c
        if info["terminal"]:
            print('V√≤ng: ', episode,'| Tr·∫°ng th√°i: ', info,'| S·ªë b∆∞·ªõc: ', steps) 
            break
        else:
            obs = deepcopy(next_obs)
    # k·∫øt th√∫c v√≤ng for
# k·∫øt th√∫c v√≤ng for




#             ‚†∞‚¢∑‚¢ø‚†Ñ
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£∑‚£Ñ
#         ‚†Ä‚†Ä‚£§‚£ø‚£á‚£ø‚£ø‚£ß‚£ø‚°Ñ
#         ‚¢¥‚†æ‚†ã‚†Ä‚†Ä‚†ª‚£ø‚£∑‚£ø‚£ø‚°Ä
#         üèÄ   ‚¢Ä‚£ø‚£ø‚°ø‚¢ø‚†à‚£ø
#          ‚†Ä‚†Ä‚¢†‚£ø‚°ø‚†Å‚¢†‚£ø‚°ä‚†Ä‚†ô
#          ‚†Ä‚†Ä‚¢ø‚£ø‚†Ä‚†Ä‚†π‚£ø
#           ‚†Ä‚†Ä‚†π‚£∑‚°Ä‚†Ä‚£ø‚°Ñ
#            ‚†Ä‚£Ä‚£º‚£ø‚†Ä‚¢à‚£ß 
#
#       B·∫°n ƒëang l√†m g√¨ v·∫≠y...?
#       Haha... ·ª¶a... 
